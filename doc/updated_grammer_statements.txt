Program := Statement | Statement Program

Statement := DefStatement | IfStatement | ReturnStatement
| PrintStatement | WhileStatement | AssignStatement
| FunctionCallStatement

DefStatement := def identifier ( ArgList ) : Sequence

ArgList := identifier MoreArgs | ε  <- replacing ArgList with MoreArgs

MoreArgs := , identifier MoreArgs | ε

IfStatement := if Expression : Sequence else : Sequence

WhileStatement := while Expression : Sequence

ReturnStatement := return Expression NEWLINE

PrintStatement := print Expression NEWLINE

AssignStatement := identifier = Expression NEWLINE

Sequence := NEWLINE INDENT MoreStatements DEDENT

MoreStatements := Statement MoreStatements | Statement

Expression := AdditionExpression Comparison

Comparison := (<|>|<=|>=|==) AdditionExpression Comparison | ε

AdditionExpression := MultiplicationExpression AdditionFactor

AdditionFactor := (+|-) MultiplicationExpression AdditionFactor | ε

MultiplicationExpression := ElementExpression MultiplicationFactor

MultiplicationFactor := (*|/) ElementExpression MultiplicationFactor | ε

ElementExpression := PrimitiveExpression ElementAccess

ElementAccess := [ Expression ] ElementAcess | ε

ExpressionList := Expression MoreExpressions | ε

MoreExpressions := , Expression MoreExpressions | ε

PrimitiveExpression := Integer | ( Expression ) | identifier <- adding identifier to the end of this statement as a final option

FunctionCallStatement := PrimitiveExpression ( ExpressionList ) NEWLINE

identifier := see definition below

Integer := see definition below

