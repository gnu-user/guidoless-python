Program := Statement | Statement Program

Statement := DefStatement | IfStatement | ReturnStatement
| PrintStatement | WhileStatement | AssignStatement
| FunctionCallStatement

DefStatement := def identifier ( ArgList ) : Sequence

ArgList := identifier MoreArgs | ε  // replacing ArgList with MoreArgs

MoreArgs := , identifier MoreArgs | ε

IfStatement := if Expression : Sequence else : Sequence

WhileStatement := while Expression : Sequence

ReturnStatement := return Expression NEWLINE

PrintStatement := print Expression NEWLINE

AssignStatement := identifier = Expression NEWLINE

Sequence := NEWLINE INDENT MoreStatements DEDENT

MoreStatements := Statement MoreStatements | Statement

Expression := AdditionExpression Comparison

Comparison := (<|>|<=|>=|==) AdditionExpression Comparison | ε

AdditionExpression := MultiplicationExpression AdditionFactor

AdditionFactor := (+|-) MultiplicationExpression AdditionFactor | ε

MultiplicationExpression := ElementExpression MultiplicationFactor

MultiplicationFactor := (*|/) ElementExpression MultiplicationFactor | ε

ElementExpression := PrimitiveExpression MoreElementAccess

ElementAccess := [ Expression ] MoreElementAccess // Removal of | ε since this must not match to every possible cases

MoreElementAccess := [ Expression ] MoreElementAccess | ε // Added to allow for multiple elements accessed

ExpressionList := Expression MoreExpressions // Removal of | ε since this must not match to every possible case.

MoreExpressions := , Expression MoreExpressions | ε

PrimitiveExpression := Integer | ( Expression ) | ExpressionList | ElementAccess | VariableExpression // added ElementAccess, added variable expression

FunctionCallStatement := identifier ( ExpressionList ) NEWLINE	// Changed primitiveExpression to just identifier since that is all it can be.

VariableExpression := identifier ( ( ExpressionList ) | ε )  // Created to allow for integer and function call and remove look ahead

identifier := see definition below

Integer := see definition below
