/* Generated By:JJTree: Do not edit this line. ASTVariable.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTVariable extends SimpleNode {
  public ASTVariable(int id) {
    super(id);
  }

  public ASTVariable(Minimp p, int id) {
    super(p, id);
  }

  public Object interpret()
  {
	  /* 
	   * This method will identify whether the variable exists or not and will
	   * call add look it up in the syntax table.
	   */ 
	  if(this.jjtGetNumChildren() == 0)
	  {
		  int curScope = scope;
		  
		  for (int i = scope; i >= 0; i--)
		  {
			  if(symtab.get(this.jjtGetValue().toString(), i) != null)
			  {
				  curScope = i;
				  break;
			  }
		  }
		  
		  if (! symtab.containsKey(this.jjtGetValue().toString(), curScope))
		  {
			  // ERROR
			  System.err.println("Undefined variable : " + this.jjtGetValue().toString());
			  return null;
		  }
		  
		  /* return the value of the variable */
		  if(!(symtab.get(this.jjtGetValue(), curScope)).getClass().isAssignableFrom(VariableValue.class))
		  {
			  
			  String[] args = (String[])((Node) symtab.get(this.jjtGetValue(), curScope)).jjtGetChild(0).interpret();
			  
			  // Display the address of the function in memory
			  return "<function " + this.jjtGetValue() + " at 0x" + ((Node) symtab.get(this.jjtGetValue(), curScope)).hashCode() + ">";
		  }
		  
		  return ((Node) symtab.get(this.jjtGetValue(), curScope)).interpret();
	  }
	  
	  return null;
  }

}
/* JavaCC - OriginalChecksum=84dba81f3f659658cbbdaac564ed91b4 (do not edit this line) */
