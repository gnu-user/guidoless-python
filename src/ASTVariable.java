/* Generated By:JJTree: Do not edit this line. ASTVariable.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */

/*
 * Minimp -- An implementation of an imperative subset of Python
 *
 *
 * Copyright (C) 2013, Joseph Heron, Jonathan Gillett, and Daniel Smullen
 * All rights reserved.
 *
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
public
class ASTVariable extends SimpleNode {
  public ASTVariable(int id) {
    super(id);
  }

  public ASTVariable(Minimp p, int id) {
    super(p, id);
  }

  public Object interpret()
  {
	  /* 
	   * This method will identify whether the variable exists or not and will
	   * call add look it up in the syntax table.
	   */ 
	  if(this.jjtGetNumChildren() == 0)
	  {
		  int curScope = scope;
		  
		  for (int i = scope; i >= 0; i--)
		  {
			  if(symtab.get(this.jjtGetValue().toString(), i) != null)
			  {
				  curScope = i;
				  break;
			  }
		  }
		  
		  if (!symtab.containsKey(this.jjtGetValue().toString(), curScope))
		  {
			  // ERROR
			  System.err.println("Undefined variable : " + this.jjtGetValue().toString());
			  return null;
		  }
		  
		  /* return the value of the variable */
		  if(!(symtab.get(this.jjtGetValue(), curScope)).getClass().isAssignableFrom(VariableValue.class))
		  {			  
			  String[] args = (String[])((Node) symtab.get(this.jjtGetValue(), curScope)).jjtGetChild(0).interpret();
			  
			  // Display the address of the function in memory
			  return "<function " + this.jjtGetValue() + " at 0x" + ((Node) symtab.get(this.jjtGetValue(), curScope)).hashCode() + ">";
		  }
		  
		  String tempValue = regValues.pop();
		  asmBuffer.add("lw " + tempValue + ", " + this.jjtGetValue() + "_" + curScope);
		  return new VariableValue(tempValue);
		  //return ((Node) symtab.get(this.jjtGetValue(), curScope)).interpret();
	  }
	  
	  return null;
  }

}
/* JavaCC - OriginalChecksum=84dba81f3f659658cbbdaac564ed91b4 (do not edit this line) */
