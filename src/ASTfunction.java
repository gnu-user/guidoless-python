
/* Generated By:JJTree: Do not edit this line. ASTfunction.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTfunction extends SimpleNode {
  public ASTfunction(int id) {
    super(id);
  }

  public ASTfunction(Minimp p, int id) {
    super(p, id);
  }
  
  public Object interpret()
  {
	  // this.jjtGetValue().toString() is in the hashmap
	  //System.out.println(this.jjtGetValue().toString());
	  ASTdef_statement function = null;
	  for (int i = scope; i >= 0; i--)
	  {
		  
		  function = (ASTdef_statement) symtab.get(this.jjtGetValue().toString(), i);
		  if(function != null)
		  {
			  break;
		  }
	  }
	  
	  scope++;
	  //System.out.println(function);
	  if(function != null)
	  {
		  
		  // Scope check
		  // Map the variable values to the values of the list
		  String[] var = ((String[]) function.jjtGetChild(0).interpret());
		  //Decrement the scope for the variable binding.
		  scope--;
		  for(int i = 0; i < this.jjtGetNumChildren(); i++)
		  {
			  //symtab.put(scope, function.jjtGetChild(i).interpret(), this.jjtGetChild(i).interpret().toString());
			  
			  //System.out.println("Var " + var[i] + " value = " + this.jjtGetChild(i).interpret().toString());
			  symtab.put(var[i], scope+1, new VariableValue(Integer.valueOf(this.jjtGetChild(i).interpret().toString())));
		  }
		  scope++;
		  
		  // Iterate through children (starting after the arguments list)		
		  for(int i = 1; i < function.jjtGetNumChildren(); i++)
		  {
			  // Each child should return null unless it is a return statement
			  Object returnValue = function.jjtGetChild(i).interpret();
			  
			  if(returnValue != null)
			  {
				  removeScope();
				  return returnValue.toString();
			  }
		  }
		  
		  removeScope();
		  
		  // Success
		  return null; 
	  }
	  
	  // ERROR function not found
	  return null;
  }
}
/* JavaCC - OriginalChecksum=479d54a2631403e8e4deee571653b75d (do not edit this line) */
