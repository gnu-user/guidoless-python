import java.util.ArrayList;

/* Generated By:JJTree: Do not edit this line. ASTprint_op.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTprint_op extends SimpleNode {
  public ASTprint_op(int id) {
    super(id);
  }

  public ASTprint_op(Minimp p, int id) {
    super(p, id);
  }
  
  @Override
  public Object interpret()
  {
	  // Valid number of children
	  if(this.jjtGetNumChildren() == 1)
	  {
		  // Valid children are Integer or list
		  // Note that children can be a function call but must return a value
		  //System.out.println(this.jjtGetChild(0).interpret());
		  
		  Object returnValue = this.jjtGetChild(0).interpret();
		  int size = 1;
		  ArrayList<TypeValue> list = null;
		  
		  if (returnValue.getClass().isAssignableFrom(ArrayList.class))
		  {
			  asmBuffer.add("li $v0, 4 # Print string");
			  asmBuffer.add("la $a0, " + SLEFTB);
			  asmBuffer.add("syscall");
			  
			  list = (ArrayList<TypeValue>)returnValue;
			  size = list.size();
		  }
		  
		  for(int i = 0; i < size; i++)
		  {
			  if(list != null)
			  {
				  returnValue = list.get(i);
			  }
			  
			  if(returnValue.getClass().isAssignableFrom(CompareValue.class))
			  {
				  //System.outreturnValue.toString();
				  asmBuffer.add("li $v0, 4 # Print string");
				  
				  //String regValue = regValues.pop();
					  
				  asmBuffer.add("beqz " + ((Node)returnValue).interpret() + ", f_" + condPrintCount);
				  asmBuffer.add("la $a0, " + TRUE);
				  asmBuffer.add("b c_" + condPrintCount);
				  
				  asmBuffer.add("f_" + condPrintCount + ": la $a0, " + FALSE);
				  System.out.print("c_" + condPrintCount + ": ");
				  //asmBuffer.add("c_" + condPrintCount + ": move $a0, " + regValue);
		
				  condPrintCount++;
				  regValues.push(((Node)returnValue).interpret().toString());
				  //asmBuffer.add("li $a0 , " + regValue);
			  }
			  else if (returnValue.getClass().isAssignableFrom(VariableValue.class))
			  {
				  asmBuffer.add("li $v0, 1 # Print variable");			  
				  asmBuffer.add("move $a0, " + ((Node)returnValue).interpret());
				  regValues.push(((Node)returnValue).interpret().toString());
			  }
			  else
			  {
				  asmBuffer.add("li $v0, 1 # Print integer");			  
				  asmBuffer.add("li $a0, " + returnValue);
				  //regValues.push(returnValue.toString());
			  }
			  asmBuffer.add("syscall");
			  
			  if(list != null)
			  {
				  if(i + 1 < size)
				  {
					  asmBuffer.add("li $v0, 4 # Print string");
					  asmBuffer.add("la $a0, " + SPACE);
					  asmBuffer.add("syscall");
				  }
				  else
				  {
					  asmBuffer.add("li $v0, 4 # Print string");
					  asmBuffer.add("la $a0, " + SRIGHTB);
					  asmBuffer.add("syscall");
				  }
			  }
		  }
		  asmBuffer.add("li $v0, 4 # Print string");
		  asmBuffer.add("la $a0 , " + NEWLINE);
		  asmBuffer.add("syscall");
	  }
	  
	  return null;
  }

}
/* JavaCC - OriginalChecksum=ee2ad75a776d96a9f52054744d76d62a (do not edit this line) */
