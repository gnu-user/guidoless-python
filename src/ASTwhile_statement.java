/* Generated By:JJTree: Do not edit this line. ASTwhile_statement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */

import java.util.ArrayList;

import org.apache.commons.collections.MapIterator;
import org.apache.commons.collections.keyvalue.MultiKey;

/*
 * Minimp -- An implementation of an imperative subset of Python
 *
 *
 * Copyright (C) 2013, Joseph Heron, Jonathan Gillett, and Daniel Smullen
 * All rights reserved.
 *
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
public class ASTwhile_statement extends SimpleNode {
  public ASTwhile_statement(int id) {
    super(id);
  }

  public ASTwhile_statement(Minimp p, int id) {
    super(p, id);
  }
  
  public Object interpret()
  {
	  if(this.jjtGetNumChildren() > 1)
	  {
		  // Check the condition of the while loop
		  scope++;
		  //while(Boolean.valueOf(this.jjtGetChild(0).interpret().toString()))
		  int curWhileCount = whileCount;
		  whileCount++;
		  asmBuffer.add("w_start_" + curWhileCount + ": ");
		  asmBuffer.add("beqz " + ((CompareValue)this.jjtGetChild(0).interpret()).interpret()
				  +  ", while_" + curWhileCount);
		  //{
		  for(int i = 1; i < this.jjtGetNumChildren(); i++)
		  {
			  Object returnValue = this.jjtGetChild(i).interpret();
			  
			  if(returnValue != null)
			  {
				  removeScope();
				  return returnValue;
			  }
		  }
		  //}
		  asmBuffer.add("b w_start_" + curWhileCount);
		  asmBuffer.add("while_" + curWhileCount + ": nop");
		  
		  removeScope();
		  return null;
	  }
	  
	  // Error
	  return null;
  }

}
/* JavaCC - OriginalChecksum=65064f961399a0b14d977d8869469cf0 (do not edit this line) */
