/* Generated By:JJTree: Do not edit this line. ASTequal.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */

/*
 * Minimp -- An implementation of an imperative subset of Python
 *
 *
 * Copyright (C) 2013, Joseph Heron, Jonathan Gillett, and Daniel Smullen
 * All rights reserved.
 *
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
public
class ASTequal extends SimpleNode {
  public ASTequal(int id) {
    super(id);
  }

  public ASTequal(Minimp p, int id) {
    super(p, id);
  }
  
  public Object interpret()
  {
	  if(this.jjtGetNumChildren() > 0 && this.jjtGetNumChildren() < 3)
	  {		  
		  // The second child is the right side of the equal sign  
		  Object value = this.jjtGetChild(1).interpret().toString();
		  
		  // The first child on the left side of the equal sign is the variable
		  String variable = this.jjtGetChild(0).interpret().toString();
		  
		  // Find variable in hash and assign value to it.
		  for (int i = scope; i >= 0; i--)
		  {
			  if(symtab.get(variable, i) != null)
			  {
				  // Do not need to pop of element since it truly is a temp use of it.
				  String reg = regValues.peek();
				  
				  try
				  {
					  Integer.valueOf(value.toString());
					  asmBuffer.add("li " + reg + ", " + value);
				  }
				  catch (Exception e)
				  {
					  asmBuffer.add("move " + reg + ", " + value);
				  }				  
				  asmBuffer.add("sw " + reg + ", " + variable + "_" + i);
				  
				  symtab.put(variable, i, new VariableValue(value.toString()));
			  }
		  }
  
		  // Valid
		  return null;
	  }
	  
	  // ERROR
	  return null;
  }
}
/* JavaCC - OriginalChecksum=3a39fcc0d48e078fb5f3cb835fd6a00c (do not edit this line) */
