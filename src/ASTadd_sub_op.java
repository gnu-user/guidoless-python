/* Generated By:JJTree: Do not edit this line. ASTadd_sub_op.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */

/*
 * Minimp -- An implementation of an imperative subset of Python
 *
 *
 * Copyright (C) 2013, Joseph Heron, Jonathan Gillett, and Daniel Smullen
 * All rights reserved.
 *
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
public
class ASTadd_sub_op extends SimpleNode {
  public ASTadd_sub_op(int id) {
    super(id);
  }

  public ASTadd_sub_op(Minimp p, int id) {
    super(p, id);
  }
  
  public Object interpret()
  {
	  if(this.jjtGetNumChildren() == 2)
	  {
		  String regTemp = regValues.pop();
		  if(this.jjtGetValue().toString().equalsIgnoreCase("+"))
		  {
			  Object returnValue = this.jjtGetChild(0).interpret();
			  String regValue;
			 
			  try
			  {
				  Integer.valueOf(returnValue.toString());
				  regValue = regValues.pop();
				  asmBuffer.add("li " + regValue + ", " + returnValue);
			  }
			  catch (Exception e)
			  {
				  regValue = returnValue.toString();
			  }
			  
			  asmBuffer.add("add " + regTemp + ", " + regValue + ", " +
					  this.jjtGetChild(1).interpret().toString());
			  
			  regValues.push(regValue);
			  
			  return new VariableValue(regTemp);
			  
			  //return Integer.valueOf(this.jjtGetChild(0).interpret().toString()) +
				//	  Integer.valueOf(this.jjtGetChild(1).interpret().toString()); 
		  }
		  else if(this.jjtGetValue().toString().equalsIgnoreCase("-"))
		  {
			  Object returnValue = this.jjtGetChild(0).interpret();
			  String regValue;
			 
			  try
			  {
				  Integer.valueOf(returnValue.toString());
				  regValue = regValues.pop();
				  asmBuffer.add("li " + regValue + ", " + returnValue);
			  }
			  catch (Exception e)
			  {
				  regValue = returnValue.toString();
			  }
			  
			  asmBuffer.add("sub "+ regTemp + ", " +  regValue + ", " + 
					  this.jjtGetChild(1).interpret().toString());
			  
			  regValues.push(regValue);
			  
			  return new VariableValue(regTemp);
			  
			  //return Integer.valueOf(this.jjtGetChild(0).interpret().toString()) -
				//	  Integer.valueOf(this.jjtGetChild(1).interpret().toString());
		  }
		  else
		  {
			  // ERROR
			  return null;
		  }
	  }
	  
	  // ERROR	  
	  return null;
  }

}
/* JavaCC - OriginalChecksum=aa8276b9aa190ca71f9e7c0d26b45c18 (do not edit this line) */
