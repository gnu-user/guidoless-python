options {
    MULTI=true;
    NODE_EXTENDS="MyNode";
    TRACK_TOKENS=true;
}

PARSER_BEGIN(lexar)

public class lexar {

  public static int nesting = 0;
  public static int numNewLines = 0;

  public Node rootNode() {
    return jjtree.rootNode();
  }  
}

PARSER_END(lexar)

SKIP: {
	
	"\r"  
  | "\f"
	| " "
}


/** Programming syntax structuring */
SimpleNode Program() : 
{}
{

    (
       (Statement())
     /*| (Statement() Program())*/
    )*
    (<NEWLINE>)*
    <EOF>
    { return jjtThis;}
        
}

void Statement() :
{}
{
    (
      DefStatement()
    | IfStatement()
    | ReturnStatement()
    | PrintStatement()
    | WhileStatement()  
    | CallStatement()
    )
}

void CallStatement() : 
{}
{
  
  ( LOOKAHEAD(2) 
    AssignmentStatement()
    | FunctionCallStatement())
}

void DefStatement() :
{}
{
    ("def " <IDENTIFIER> <LEFTR> ArgList() <RIGHTR> ":" Sequence())
}

void ArgList() :
{}
{
    (<IDENTIFIER> MoreArgs() | {})
}

void MoreArgs() : 
{}
{
    ("," <IDENTIFIER> MoreArgs() | {})
}

void IfStatement() :
{}
{
    ("if " Expression() ":" Sequence() "else:" Sequence())
}

void WhileStatement() :
{}
{
    ("while " Expression() ":" Sequence())
}

void ReturnStatement() :
{}
{
    ("return " Expression() <NEWLINE>)
}

void PrintStatement() :
{}
{
    ("print " Expression() <NEWLINE>)
}

void AssignmentStatement() :
{}
{
    (<IDENTIFIER> "=" Expression() <NEWLINE>)
}

void Sequence() :
{ Token t; }
{
    
    
    (<NEWLINE> IndentEnter() MoreStatements() /*<DEDENT>*/)
    {
      //Token t;
      nesting--;
      System.out.println("nesting = " + nesting);
      //System.out.println("token = " + t.toString());
    }
}

void IndentEnter() :
{
  Token t;
}
{
  {
    nesting = 1;
    System.out.println("nesting = " + nesting);
  }
  (
      (<INDENT> Indent()) 
  )
}

void Indent() :
{
  Token t = null;
}
{
  
  (
      (t=<INDENT> Indent()) 
      | {}
  )
  {
    //Token t;
    if(t != null)
    {
      nesting++;
      System.out.println("nesting = " + nesting);
      System.out.println("token = " + t.toString());
    }
  }
}



void MoreStatements() :
{}
{
    ( 
      (Statement() AnotherStatement())
    )
}

void AnotherStatement() :
{ }
{
    /* Requires the same number of indends as previous */
    /*
     * Essentially, we need to get DEDENT working so that multiple statements can excepted within a single loop, as well.
     */
    (
      ( IndentEnter() Statement()  AnotherStatement())
    | {}

    )
}

void Expression() :
{}
{
    (AdditionalExpression() Comparison())
}

void Comparison() :
{}
{
    (
      (<COMPARE> AdditionalExpression() Comparison())
    | {}
    )
}

void AdditionalExpression() :
{}
{
    (MultiplicationExpression() AdditionFactor())
}

void AdditionFactor() :
{}
{
    (
      <ADDSUB> MultiplicationExpression() AdditionFactor()
    | {}
    )
}

void MultiplicationExpression() :
{}
{
    (ElementExpression() MultiplicationFactor())
}

void MultiplicationFactor() :
{}
{
    (
      (<MUTLDIV> ElementExpression() MultiplicationFactor())
    | {}
    )
}

void ElementExpression() :
{}
{
    (PrimitiveExpression() ElementAccess())
}

void ElementAccess() :
{}
{
    (
      (<LEFTS> Expression() <RIGHTS> ElementAccess())
    | {}
    )
}

void ExpressionList() :
{}
{
    (
      (Expression() MoreExpressions())
    | {}
    )
}

void MoreExpressions() :
{}
{
    (
      ("," Expression() MoreExpressions())
    | {}
    )
}

void PrimitiveExpression() :
{}
{
    (
      <INTEGER>
    | (<LEFTR> Expression() <RIGHTR>)
    | <IDENTIFIER>
    )
}

void FunctionCallStatement() :
{}
{
    (PrimitiveExpression() <LEFTR> ExpressionList() <RIGHTR> <NEWLINE>)
}


TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: (<LETTER>|<UNDERSCORE>) (<LETTER>|<DIGIT>|<UNDERSCORE>)* >
| < #UNDERSCORE: "_" >
| < #LETTER: [ "a"-"z", "A"-"Z" ] >
| < #DIGIT: [ "0"-"9"] >
}

TOKEN : /* LITERALS */
{
  <INTEGER: (<DIGIT>)+ >
}

TOKEN : /* DEDENT */
{
    /*  <DEDENT: ~["\t"]>
    | */<INDENT: "\t">
    | <NEWLINE: "\n">
}

TOKEN : /* Comparison */
{
    <COMPARE: ("<"|">"|"<="|">="|"==")>
}

TOKEN : /* MATH */
{
      <ADDSUB: ("+"|"-")>
    | <MUTLDIV: ("*"|"/")>
}

TOKEN : /* BRACKETS */
{
      <LEFTR: "(">
    | <RIGHTR: ")">
    | <LEFTS: "[">
    | <RIGHTS: "]">
}
